'use strict';

var QueryParser = require('../../app/lib/queryParser');
var configuration, queryParser;

var query;

describe('queryParser', function(){
  beforeEach(function(){
    queryParser = new QueryParser({});
  });
  describe('when given no query arg', function() {
    it('returns an empty array', function() {
      query = {};
      var expectedCriteria = [];

      var criteria = queryParser.parse(query);
      expect(criteria).to.deep.equal(expectedCriteria);
    });
  });

  describe('when given a single query arg', function() {

    it('returns an array with one criterion', function() {
      query = {q: 'firstName eq \'Jeff\''};
      var expectedCriteria = [{
        key: 'firstName',
        op: 'eq',
        value: '\'Jeff\''
      }];

      var criteria = queryParser.parse(query);
      expect(criteria).to.deep.equal(expectedCriteria);
    });

    it('accepts query operators regardless of case', function(){
      query = {q: 'firstName Eq \'Jeff\''};
      var expectedCriteria = [{
        key: 'firstName',
        op: 'eq',
        value: '\'Jeff\''
      }];

      var criteria = queryParser.parse(query);
      expect(criteria).to.deep.equal(expectedCriteria);
    });
  });

  describe('when given multiple query args', function() {
    it('criteria contains multiple criterion', function() {
      query = {q: 'firstName eq \'Jeff\' and lastName eq \'Posey\' and city eq \'Birmingham\''};
      var expectedCriteria = [{
        key: 'firstName',
        op: 'eq',
        value: '\'Jeff\''
      }, {
        key: 'lastName',
        op: 'eq',
        value: '\'Posey\''
      },{
        key: 'city',
        op: 'eq',
        value: '\'Birmingham\''
      }];

      var criteria = queryParser.parse(query);
      expect(criteria).to.deep.equal(expectedCriteria);
    });

    it('handles logical operators regardless of case', function(){
      query = {q: 'firstName eq \'Jeff\' And lastName eq \'Posey\''};
      var expectedCriteria = [{
        key: 'firstName',
        op: 'eq',
        value: '\'Jeff\''
      }, {
        key: 'lastName',
        op: 'eq',
        value: '\'Posey\''
      }];

      var criteria = queryParser.parse(query);
      expect(criteria).to.deep.equal(expectedCriteria);
    });
  });

  describe('with defined mappings', function(){
    beforeEach(function(){
      configuration = {
        'firstName': 'q[FirstName]'
      };
      queryParser = new QueryParser(configuration);
    });

    it('maps the query params appropriately', function(){
      query = {q: 'firstName Eq \'Jeff\''};
      var expectedCriteria = [{
        key: 'q[FirstName]',
        op: 'eq',
        value: '\'Jeff\''
      }];

      var criteria = queryParser.parse(query);
      expect(criteria).to.deep.equal(expectedCriteria);
    });
  });
});